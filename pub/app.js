// Generated by CoffeeScript 1.6.2
(function() {
  var Node, SimpleNote, Tag, author, date, delay, email, github, hash, intersect, interval, isArr, isDate, isFn, isNum, isObj, isStr, k, koMap, maxScreenWidthForMobile, now, obs, revision, revive, sizeOf, store, time, timeout, uuid, version, _ref,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  maxScreenWidthForMobile = 480;

  _ref = JSON.parse(jQuery.ajax({
    url: 'build.json',
    async: false
  }).responseText), author = _ref.author, email = _ref.email, github = _ref.github, version = _ref.version, revision = _ref.revision, date = _ref.date;

  isFn = jQuery.isFunction;

  isArr = jQuery.isArray;

  isObj = jQuery.isPlainObject;

  isNum = jQuery.isNumeric;

  isStr = function(v) {
    return typeof v === "string";
  };

  isDate = function(v) {
    if (Object.prototype.toString.call(v) !== '[object Date]') {
      return false;
    } else {
      return !isNaN(v.getTime());
    }
  };

  timeout = {
    set: function(ms, fn) {
      return setTimeout(fn, ms);
    },
    clear: function(t) {
      return clearTimeout(t);
    }
  };

  interval = {
    set: function(ms, fn) {
      return setInterval(fn, ms);
    },
    clear: function(i) {
      return clearInterval(i);
    }
  };

  delay = function(fn) {
    return timeout.set(1, fn);
  };

  revive = function(key, value) {
    var c;

    if (value && (c = value.__constructor) && (c = revive.constructors[c]) && (typeof c.fromJSON === "function")) {
      return c.fromJSON(value);
    } else {
      return value;
    }
  };

  revive.constructors = {};

  store = {
    set: function(key, val) {
      return localStorage.setItem(key, (isStr(val) ? val : JSON.stringify(val)));
    },
    get: function(key) {
      var e;

      try {
        return JSON.parse(localStorage.getItem(key), revive);
      } catch (_error) {
        e = _error;
        return null;
      }
    },
    remove: function(key) {
      return localStorage.removeItem(key);
    }
  };

  obs = function(value, owner) {
    switch (false) {
      case !(value && (value.call || value.read || value.write)):
        return ko.computed(value);
      case !(value && value.map):
        return ko.observableArray(value, owner || this);
      default:
        return ko.observable(value);
    }
  };

  uuid = (function() {
    var id, ids;

    ids = [];
    id = function(a) {
      if (a) {
        return (a ^ Math.random() * 16 >> a / 4).toString(16);
      } else {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, id);
      }
    };
    return function() {
      var e;

      while (true) {
        e = id();
        if (!~ids.indexOf(e)) {
          break;
        }
      }
      ids.push(e);
      return e;
    };
  })();

  now = function() {
    return new Date();
  };

  time = (function() {
    var a;

    a = obs(0);
    interval.set(1e3, function() {
      return a(now());
    });
    return a;
  })();

  sizeOf = function(v) {
    var k;

    switch (false) {
      case !isNum(v):
        return v.split("").length;
      case !isStr(v || isArr(v)):
        return v.length;
      case !isObj(v):
        return ((function() {
          var _results;

          _results = [];
          for (k in v) {
            if (!__hasProp.call(v, k)) continue;
            _results.push(k);
          }
          return _results;
        })()).length;
      default:
        return null;
    }
  };

  koMap = function(model, map) {
    var key, value;

    for (key in map) {
      value = map[key];
      if (ko.isWriteableObservable(model[key])) {
        model[key](value);
      } else {
        model[key] = value;
      }
    }
    return model;
  };

  hash = (function() {
    var h, s;

    h = obs("");
    s = function() {
      return h(location.hash.replace(/#/, "") || "");
    };
    $(window).on("hashchange", s);
    h.subscribe(function(v) {
      return location.hash = v;
    });
    s();
    return h;
  })();

  intersect = function(a, b) {
    return a.filter(function(n) {
      return ~b.indexOf(n);
    });
  };

  k = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    PGUP: 33,
    PGDOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SPACE: 32,
    DEL: 46
  };

  /*
  @class simpleNote
  */


  SimpleNote = (function() {
    SimpleNote.instances = [];

    function SimpleNote(element) {
      this.clearSearchFilter = __bind(this.clearSearchFilter, this);
      this.removeAlert = __bind(this.removeAlert, this);
      this.removeNotification = __bind(this.removeNotification, this);
      this.stopSort = __bind(this.stopSort, this);
      this.startSort = __bind(this.startSort, this);
      this.checkForOptions = __bind(this.checkForOptions, this);
      this.removeTag = __bind(this.removeTag, this);
      this.addTag = __bind(this.addTag, this);
      this.openNode = __bind(this.openNode, this);
      this.insertNodeAfter = __bind(this.insertNodeAfter, this);
      this.addNodeHere = __bind(this.addNodeHere, this);
      this.addNodeTo = __bind(this.addNodeTo, this);
      this.selectionEditTags = __bind(this.selectionEditTags, this);
      this.selectionRemove = __bind(this.selectionRemove, this);
      this.selectionEditDeadlines = __bind(this.selectionEditDeadlines, this);
      this.selectionArchive = __bind(this.selectionArchive, this);
      this.selectionInvert = __bind(this.selectionInvert, this);
      this.selectionUnselect = __bind(this.selectionUnselect, this);
      this.applyEvents = __bind(this.applyEvents, this);
      this.save = __bind(this.save, this);
      this.revive = __bind(this.revive, this);
      var _this = this;

      SimpleNote.instances.push(this);
      this.timeout = null;
      this.interval = null;
      this.root = null;
      this.searchFilter = obs("");
      this.editingFilter = obs(false);
      this.current = obs(null);
      this.alerts = obs([]);
      this.notifications = obs([]);
      this.connectionStatus = obs(0);
      this.connectionStatusText = obs(function() {
        switch (_this.connectionStatus()) {
          case 0:
            return 'offline';
          case 1:
            return 'online';
        }
      });
      this.connectionStatusColor = obs(function() {
        switch (_this.connectionStatus()) {
          case 0:
            return 'red';
          case 1:
            return 'green';
        }
      });
      this.syncStatus = obs(0);
      this.syncStatusText = obs(function() {
        switch (_this.syncStatus()) {
          case 0:
            return 'not set up';
          case 1:
            return 'connected';
          case 2:
            return 'disconnected';
          case 3:
            return 'synchronizing';
        }
      });
      this.syncStatusColor = obs(function() {
        switch (_this.syncStatus()) {
          case 0:
            return '';
          case 1:
            return 'green';
          case 2:
            return 'red';
          case 3:
            return 'orange';
        }
      });
      this.nodes = obs([]);
      this.tags = obs([]);
      this.realFilter = obs(function() {
        var f, _ref1;

        f = _this.searchFilter().split(/\s+/);
        if (!f[0] || ((_ref1 = f[0]) != null ? _ref1[0] : void 0) === '!') {
          return {
            tags: [],
            times: [],
            words: []
          };
        }
        return {
          tags: f.filter(function(n) {
            return n.match(/^#/);
          }).map(function(n) {
            return n.replace(/#/, '');
          }),
          times: f.filter(function(n) {
            return n.match(/^@/);
          }).map(function(n) {
            return n.replace(/@/, '');
          }),
          words: f.filter(function(n) {
            return n.match(/^[^#@]/);
          })
        };
      }).extend({
        debounce: 500
      });
      this.selectedNodes = obs(function() {
        return _this.nodes.filter('selected');
      });
      this.bookmarkedNodes = obs(function() {
        return _this.nodes.filter('bookmarked');
      });
      this.breadcrumbs = obs(function() {
        var _ref1;

        _this.current();
        return ((_ref1 = _this.current()) != null ? typeof _ref1.parents === "function" ? _ref1.parents().concat([_this.current()]) : void 0 : void 0) || [];
      });
      hash.subscribe(function(id) {
        var _ref1;

        _this.current((id && id.length && _this.nodes.find("id", id)) || (id && id.length && hash('') && _this.root) || _this.root);
        return (_ref1 = _this.current()) != null ? _ref1.editingNote(true) : void 0;
      });
    }

    SimpleNote.prototype.revive = function() {
      var _ref1,
        _this = this;

      this.root = (_ref1 = store.get('root')) != null ? _ref1 : new Node({
        id: 'root',
        title: 'home'
      });
      hash.valueHasMutated();
      delay(function() {
        var _ref2, _ref3;

                if ((_ref2 = store.get('tags')) != null) {
          _ref2;
        } else {
          [];
        };
        return _this.archive = (_ref3 = store.get('archive')) != null ? _ref3 : new Node({
          id: 'archive',
          title: 'archive'
        });
      });
      return this;
    };

    SimpleNote.prototype.save = function() {
      var _this = this;

      timeout.clear(this.timeout);
      this.timeout = timeout.set(100, function() {
        store.set('root', _this.root.toJSON());
        store.set('tags', _this.tags());
        if (_this.archive) {
          return store.set('archive', _this.archive.toJSON());
        }
      });
      return this;
    };

    SimpleNote.prototype.startOnlineCheck = function() {
      var checkConnection, long, numShortChecks, offlineCount, short,
        _this = this;

      offlineCount = 0;
      numShortChecks = 5;
      short = 2;
      long = 60;
      checkConnection = function() {
        return $.get('online/online.json').error(function() {
          _this.connectionStatus(0);
          return timeout.set((offlineCount++ < numShortChecks ? short : long) * 1e3, checkConnection);
        }).done(function() {
          _this.connectionStatus(1);
          offlineCount = 0;
          return timeout.set(long * 1e3, checkConnection);
        });
      };
      return checkConnection();
    };

    SimpleNote.prototype.applyEvents = function() {
      var $doc, $tagsMenu, $view, model, _ref1,
        _this = this;

      _ref1 = [this, this.doc, this.view], model = _ref1[0], $doc = _ref1[1], $view = _ref1[2];
      $view.on("click", ".headline", function(e) {
        var $t;

        $t = $(e.target);
        if (!$t.is(".bullet, .action, .info")) {
          return $t.parents(".headline").find("title").focus();
        }
      });
      $view.on("keyup, click", function() {
        return model.save();
      });
      $tagsMenu = $('#tagsMenu', $view);
      $tagsMenu.data('node', null).on('dismiss', function() {
        return $(this).fadeOut('fast', function() {
          return $(this).css({
            top: '',
            left: ''
          });
        });
      }).on('call', function(e, node, o) {
        var $this;

        $doc.off('click.tagsmenu');
        $this = $(this).position({
          my: 'right top',
          at: 'right bottom',
          of: o.target
        }).fadeIn('fast').data('node', node);
        $this.find('input').focus();
        return $doc.on('click.tagsmenu', function(e) {
          if (e.timeStamp === o.timeStamp || $(e.target).parents('#tagsMenu').length !== 0) {
            return;
          }
          $doc.off('click.tagsmenu');
          return $this.trigger('dismiss');
        });
      }).on('click', 'li.list', function() {
        var node, tag;

        tag = ko.dataFor(this);
        node = $;
        if (node.tags.remove(tag).length === 0) {
          return node.tags.push(tag);
        }
      }).on('click', 'i.icon-tag.addTag', function() {
        var name;

        if (!(name = $(this).prev().val())) {
          return;
        }
        $tagsMenu.data('node').tags.push(new Tag({
          name: name
        }));
        return $(this).next().val('').focus();
      }).on('keydown', 'input', function(e) {
        if (e.which === k.ESC) {
          $tagsMenu.trigger('dismiss');
        }
        if (e.which !== k.ENTER) {
          return;
        }
        return $(this).next().trigger('click');
      });
      $('#search > div >.icon-tags', $view).click(function(e) {
        var t;

        model.editingFilter(true);
        t = $('#tags');
        if (t.is('visible')) {
          return t.slideUp();
        }
        t.slideDown('fast');
        return $doc.on('click.tagsfilter', function(f) {
          if (e.timeStamp === f.timeStamp || $(f.target).is('.icon-trash')) {
            return;
          }
          $doc.off('click.tagsfilter');
          return t.slideUp('fast');
        });
      });
      $('#search > div >.icon-star', $view).click(function(e) {
        var b;

        model.editingFilter(true);
        b = $('#bookmarks');
        if (b.is('visible')) {
          return b.slideUp();
        }
        b.slideDown('fast');
        return $doc.on('click.bookmarks', function(f) {
          if (e.timeStamp === f.timeStamp || $(f.target).is('.icon-star-half')) {
            return;
          }
          $doc.off('click.bookmarks');
          return b.slideUp('fast');
        });
      });
      $('#search > div > .icon-ellipsis-vertical').click(function(e) {
        var s;

        s = $('#specialPages');
        if (s.is('visible')) {
          return s.slideUp();
        }
        s.slideDown('fast');
        return $doc.on('click.specialPages', function(f) {
          if (e.timeStamp === f.timeStamp) {
            return;
          }
          $doc.off('click.specialPages');
          return s.slideUp('fast');
        });
      });
      return this;
    };

    SimpleNote.prototype.startPeriodicalSave = function() {
      this.interval = interval.set(6e4, this.save);
      return this;
    };

    SimpleNote.prototype.stopPeriodicalSave = function() {
      interval.clear(this.interval);
      return this;
    };

    SimpleNote.prototype.selectionUnselect = function() {
      var node, _i, _len, _ref1, _results;

      _ref1 = this.selectedNodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.selected(false));
      }
      return _results;
    };

    SimpleNote.prototype.selectionInvert = function() {
      var node, _i, _len, _ref1, _results;

      _ref1 = this.nodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.selected(!node.selected()));
      }
      return _results;
    };

    SimpleNote.prototype.selectionArchive = function() {
      var node, _i, _len, _ref1, _results;

      _ref1 = this.selectedNodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.archive());
      }
      return _results;
    };

    SimpleNote.prototype.selectionEditDeadlines = function() {
      var d, node, _i, _len, _ref1, _results;

      d = prompt('set a deadline for the selected items', new Date());
      _ref1 = this.selectedNodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.deadline(d));
      }
      return _results;
    };

    SimpleNote.prototype.selectionRemove = function() {
      var node, _i, _len, _ref1, _results;

      if (confirm("really delete " + (this.selectedNodes().length) + " selected outlines? ATTENTION! Children Nodes will be deleted with their parents!")) {
        _ref1 = this.selectedNodes();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          node = _ref1[_i];
          _results.push(node._delete());
        }
        return _results;
      }
    };

    SimpleNote.prototype.selectionEditTags = function() {};

    SimpleNote.prototype.addNodeTo = function(parent, options) {
      return (new Node($.extend((isObj(options) ? options : {}), {
        parent: parent
      }))).editingTitle(true);
    };

    SimpleNote.prototype.addNodeHere = function(options) {
      return this.addNodeTo((options.id != null) && options || this.current(), options);
    };

    SimpleNote.prototype.insertNodeAfter = function(node, options) {
      return this.addNodeTo(this.current().parent(), options);
    };

    SimpleNote.prototype.openNode = function(el) {
      var _ref1;

      return hash((el && el.id) || ((_ref1 = el && el[0] && ko.dataFor(el[0])) != null ? _ref1.id : void 0) || el || this.root.id);
    };

    SimpleNote.prototype.addTag = function() {
      return new Tag({
        name: prompt('set a name', '')
      });
    };

    SimpleNote.prototype.removeTag = function(item) {
      var node, _i, _len, _ref1, _results;

      if (!confirm("really delete the tag named " + (item.name()) + "?")) {
        return;
      }
      this.tags.remove(item);
      _ref1 = this.nodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.tags.remove(item));
      }
      return _results;
    };

    SimpleNote.prototype.fadeIn = function(el) {
      return $(el).hide().fadeIn('slow');
    };

    SimpleNote.prototype.fadeOut = function(el) {
      return $(el).fadeOut(function() {
        return $(el).remove();
      });
    };

    SimpleNote.prototype.checkForOptions = function(el) {
      var domnode;

      if ((domnode = $('.options', el)).length > 0 && $('[data-bind]', el).length > 0) {
        return ko.applyBindings(this, domnode[0]);
      }
    };

    SimpleNote.prototype.startSort = function() {
      return $('.node', this.view).on({
        "mouseover.sort": function() {
          return ko.dataFor($(this)[0]).expanded(true);
        },
        "mouseout.sort": function() {
          return ko.dataFor($(this)[0]).expanded(false);
        }
      });
    };

    SimpleNote.prototype.stopSort = function() {
      return $('.node', this.view).off('.sort');
    };

    SimpleNote.prototype.removeNotification = function(item) {
      return this.notifications.remove(item);
    };

    SimpleNote.prototype.removeAlert = function(item) {
      return this.alerts.remove(item);
    };

    SimpleNote.prototype.clearSearchFilter = function() {
      return this.searchFilter('');
    };

    return SimpleNote;

  })();

  SimpleNote.liststyletypes = [
    {
      name: "none",
      value: []
    }, {
      name: "1, 2, 3",
      value: ["decimal"]
    }, {
      name: "1., 2., 3.",
      value: ["decimal", "dot"]
    }, {
      name: "1.1, 1.2, 1.3",
      value: ["decimal", "dot", "add"]
    }, {
      name: "a, b, c",
      value: ["lowerAlpha"]
    }, {
      name: "(a), (b), (c)",
      value: ["lowerAlpha", "dot"]
    }, {
      name: "A, B, C",
      value: ["upperAlpha"]
    }, {
      name: "(A), (B), (C)",
      value: ["upperAlpha", "dot"]
    }
  ];

  revive.constructors["SimpleNote"] = SimpleNote;

  /*
  @class Tag
  */


  Tag = (function() {
    Tag.fromJSON = function(data) {
      var instance, tag;

      if (tag = SimpleNote.activeInstance.tags.find('id', data.id)) {
        return tag;
      }
      delete data.__constructor;
      instance = new Tag();
      return koMap(instance, data);
    };

    function Tag(options) {
      this.toggleInFilter = __bind(this.toggleInFilter, this);
      this._delete = __bind(this._delete, this);
      this.remove = __bind(this.remove, this);
      this.edit = __bind(this.edit, this);
      this.toJSON = __bind(this.toJSON, this);
      var _this = this;

      this.id = uuid();
      this.model = SimpleNote.activeInstance;
      this.name = obs((options != null ? options.name : void 0) || "");
      this.color = obs((options != null ? options.color : void 0) || "white");
      this.fgColor = obs(function() {
        var c, x;

        x = [];
        c = (x[0] = new RGBColor(_this.color())).foreground();
        delete x[0];
        return c;
      });
      this.count = obs(function() {
        return Node.nodes.filter(function(n) {
          return n.tags.has(_this);
        }).length;
      });
      this.model.tags.push(this);
      this.model.save();
    }

    Tag.prototype.toJSON = function() {
      return {
        __constructor: 'Tag',
        id: this.id,
        name: this.name(),
        color: this.color()
      };
    };

    Tag.prototype.edit = function() {
      this.name(prompt("change name from " + (this.name()) + " to ...", this.name()));
      this.color(prompt("change color from " + (this.color()) + " to ...", this.color()));
      return this.model.save();
    };

    Tag.prototype.remove = function() {
      if (confirm("really delete tag '" + (this.name()) + "'?")) {
        return this._delete;
      }
    };

    Tag.prototype._delete = function() {
      var node, _i, _len, _ref1, _results;

      this.model.tags.remove(this);
      _ref1 = this.model.nodes();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.tags.remove(this));
      }
      return _results;
    };

    Tag.prototype.toggleInFilter = function(i, e) {
      console.log(arguments);
      if ($(e.target).is('.icon-trash, .icon-pencil')) {
        return;
      }
      if (this.model.searchFilter().match('#' + this.name())) {
        this.model.searchFilter(this.model.searchFilter().replace('#' + this.name(), '').replace(/\s{2,}/g, " ").replace(/^\s*|\s*$/g, "") + " ");
      } else {
        this.model.searchFilter((this.model.searchFilter() + " #" + this.name()).replace(/\s{2,}/g, " ").replace(/^\s*|\s*$/g, "") + " ");
      }
      return this.model.editingFilter(true);
    };

    return Tag;

  }).call(this);

  revive.constructors['Tag'] = Tag;

  /*
  * @class Node
  */


  Node = (function() {
    function Node(options) {
      this.toJSON = __bind(this.toJSON, this);
      this.editFiles = __bind(this.editFiles, this);
      this.editListType = __bind(this.editListType, this);
      this.editDeadline = __bind(this.editDeadline, this);
      this.editTags = __bind(this.editTags, this);
      this.archive = __bind(this.archive, this);
      this.toggleBookmarked = __bind(this.toggleBookmarked, this);
      this.toggleExpanded = __bind(this.toggleExpanded, this);
      this.toggleSelected = __bind(this.toggleSelected, this);
      this.makeActive = __bind(this.makeActive, this);
      this.alarm = __bind(this.alarm, this);
      this._delete = __bind(this._delete, this);
      this.remove = __bind(this.remove, this);
      var active,
        _this = this;

      this.model = SimpleNote.activeInstance;
      this.id = (options != null ? options.id : void 0) || uuid();
      this.originalParent = null;
      this.title = obs((options != null ? options.title : void 0) || "").extend({
        parse: Node.parseHeadline
      });
      this.notes = obs("").extend({
        parse: Node.parseNote
      });
      this.deadline = obs(null).extend({
        parse: Node.parseDate
      });
      active = obs(false);
      this.bookmarked = obs(false);
      this.selected = obs(false);
      this.realExpanded = obs(false);
      this.expanded = obs({
        read: function() {
          if (window.innerWidth < maxScreenWidthForMobile) {
            return false;
          } else {
            return _this.realExpanded();
          }
        },
        write: this.realExpanded
      });
      this.listStyleType = obs([]);
      this.editingTitle = obs(false);
      this.editingNote = obs(false);
      this.children = obs([]);
      this.tags = obs([]);
      this.tags.extend({
        pickFrom: {
          array: this.model.tags,
          key: "name"
        }
      });
      this.files = obs([]);
      this.visible = obs(function() {
        var tags, words, _ref1;

        _ref1 = _this.model.realFilter(), tags = _ref1.tags, words = _ref1.words;
        return _this.model.current === _this || (!!_this.children.filter('visible').length) || ((tags.length ? !!intersect(_this.tags.map('name'), tags).length : true) && (words.length ? !!(_this.title() + ' ' + _this.notes()).match(new RegExp(words.join('|'), 'i')) : true));
      });
      this.active = obs({
        read: active,
        write: function(v) {
          var node, _i, _len, _ref1;

          if (v === active() || v === false) {
            return active(v);
          }
          _ref1 = _this.model.nodes();
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            node = _ref1[_i];
            node.active(false);
          }
          return active(true);
        }
      });
      this.hasNote = obs(function() {
        return _this.notes().length;
      });
      this.hasChildren = obs(function() {
        return _this.children().length;
      });
      this.cssClass = obs(function() {
        return _this.listStyleType().concat("node").filter(Boolean).join(" ");
      });
      this.bullet = obs(function() {
        return ((_this.hasNote() || _this.hasChildren()) && ((!_this.expanded() && Node.bullets.right) || (_this.expanded() && Node.bullets.down))) || Node.bullets.round;
      });
      this.forcedparent = obs(null);
      this.parent = obs({
        read: function() {
          return _this.forcedparent() || _this.model.nodes.find(function(n) {
            return n.children.has(_this);
          });
        },
        write: function(v) {
          return _this.forcedparent(v);
        }
      });
      this.parents = obs(function() {
        var p, x;

        if (_this.parent() === null) {
          return [];
        }
        p = [_this.parent()];
        while ((x = p[0].parent()) !== null) {
          p.unshift(x);
        }
        return p;
      });
      this.deadlineDisplay = (function() {
        var personalTimer, subscribed, subscription;

        personalTimer = obs(null);
        subscribed = obs(false);
        subscription = null;
        subscribed.subscribe(function(v) {
          if (v === true) {
            return subscription = time.subscribe(function(w) {
              return personalTimer(w);
            });
          } else {
            return typeof subscription.dispose === "function" ? subscription.dispose() : void 0;
          }
        });
        return obs(function() {
          var d;

          personalTimer();
          d = _this.deadline();
          if (d === null) {
            return "";
          }
          if (d > now()) {
            subscribed(true);
            return moment(d).fromNow();
          }
          subscribed(false);
          _this.alarm();
          return "";
        }).extend({
          throttle: 1
        });
      })();
      this.model.nodes.push(this);
      Node.nodes.push(this);
      if (options != null ? options.parent : void 0) {
        options.parent.children.push(this);
      }
      this;
    }

    Node.prototype.open = function() {
      return hash(this.id);
    };

    Node.prototype.remove = function() {
      if (confirm('really delete this node?')) {
        return this._delete();
      }
    };

    Node.prototype._delete = function() {
      if (this === this.model.current()) {
        this.model.current(this.parent());
      }
      this.parent().children.remove(this);
      this.model.nodes.remove(this);
      return this.model.save();
    };

    Node.prototype.alarm = function() {
      var _base;

      this.model.save();
      this.model.notifications.push(this.deadline() + '\n' + this.title());
      this.deadline(null);
      return typeof (_base = this.model.pop).play === "function" ? _base.play() : void 0;
    };

    Node.prototype.makeActive = function() {
      return this.active(true);
    };

    Node.prototype.toggleSelected = function() {
      return this.selected(!this.selected());
    };

    Node.prototype.toggleExpanded = function() {
      if (window.innerWidth < maxScreenWidthForMobile) {
        return this.open();
      }
      return this.expanded(!this.expanded());
    };

    Node.prototype.toggleBookmarked = function() {
      return this.bookmarked(!this.bookmarked());
    };

    Node.prototype.archive = function() {
      this.selected(false);
      this.originalParent = this.parent();
      this.parent().children.remove(this);
      return this.model.archive.children.push(this);
    };

    Node.prototype.editTags = function(n, e) {
      this.active(true);
      return this.model.$tagsMenu.trigger('call', [n, e]);
    };

    Node.prototype.editDeadline = function() {
      return this.deadline((prompt('set a deadline', new Date())) || null);
    };

    Node.prototype.editListType = function() {};

    Node.prototype.editFiles = function() {};

    Node.prototype.toJSON = function() {
      return {
        __constructor: 'Node',
        id: this.id,
        title: escape(this.title()),
        notes: escape(this.notes()),
        deadline: this.deadline(),
        bookmarked: this.bookmarked(),
        expanded: (this.hasNote() || this.hasChildren()) && this.realExpanded(),
        listStyleType: this.listStyleType(),
        children: this.children(),
        tags: this.tags(),
        originalParent: this.originalParent
      };
    };

    Node.fromJSON = function(data) {
      var instance;

      delete data.__constructor;
      instance = new Node();
      return koMap(instance, data);
    };

    Node.parseNote = function(v) {
      return v.replace(/(<br>|\n|\r)$/i, "");
    };

    Node.parseHeadline = function(v) {
      return v.replace(/<br>|\n|\r/ig, "");
    };

    Node.parseDate = function(v) {
      var x;

      if (v === null) {
        return null;
      }
      if (isDate(x = new Date(v)) || isDate(x = new Date(parseInt(v))) || isDate(x = Date.intelliParse(v))) {
        return x;
      }
      return null;
    };

    Node.bullets = {
      right: "full",
      down: "full open",
      round: "empty"
    };

    Node.nodes = obs([]);

    return Node;

  })();

  revive.constructors['Node'] = Node;

  (function($, view, model) {
    applicationCache.onchecking = function() {
      return $.holdReady(true);
    };
    applicationCache.ondownloading = function() {
      return $.holdReady(true);
    };
    applicationCache.onerror = function() {
      $.holdReady(false);
      return model.connectionStatus(0);
    };
    applicationCache.onnoupdate = function() {
      $.holdReady(false);
      return model.connectionStatus(1);
    };
    applicationCache.onprogress = function() {
      $.holdReady(true);
      return delay(function() {
        return $('#curtain').find('i').after('.');
      });
    };
    applicationCache.onupdateready = applicationCache.oncached = function() {
      $.holdReady(true);
      delay(function() {
        return location.reload();
      });
      return timeout.set(1000, function() {
        return $('#curtain').find('i').after("<br>there is a new version of this app.<br>please <a style='color:cyan' href='index.html'>reload the page manually</a>").find('a').focus();
      });
    };
    return $(function() {
      model.doc = $(document);
      model.win = $(window);
      model.view = $(view);
      delay(function() {
        return model.pop = $('audio')[0];
      });
      ko.applyBindings(model, model.view[0]);
      model.revive();
      model.applyEvents();
      model.startPeriodicalSave();
      model.startOnlineCheck();
      delay(function() {
        return $("#curtain").fadeOut("slow", function() {
          return $('body').css('overflow', 'auto');
        });
      });
      return null;
    });
  })(jQuery, "body", window.note = SimpleNote.activeInstance = new SimpleNote());

  (function() {
    var addconstructor, specialPages;

    specialPages = [
      {
        id: 'help',
        title: 'help',
        notes: "<h2> welcome to the simplenote manual</h2>\n<p>simplenote aims to be your favorite outline tool.</p>\n\n<p>it evolved from the idea to bring the great and powerful org-mode from the geeky hands of linux-fans to the web. and maybe give it a facelift in the process.</p>\n\n<p>click on a bullet (&nbsp;&bull;&nbsp;) or doubleclick an item title to open it and learn more about this tool.</p>\n<p>to get back to your notebook, click the menu button on the top right ( <i class='icon-ellipsis-vertical'></i> ) and choose the notebook from the appearing menu</p>",
        children: [
          {
            id: 'help-first-step',
            title: 'first steps',
            notes: "<h2> congratulations! </h2>\n<p>you did your first step already by opening this page!</p>\n<p>see how the breadcrumbs above got updated? use them to easily navigate into the depths of your notebook.</p>\n<p>with your own notes there will be an action bar appearing below the breadcrumbs with buttons to change tags, deadlines, files and more.</p>  \n<p>items with content will have a halo (&nbsp;<span class='bullet full'></span>&nbsp;) while those without details or subitems won't (&nbsp;&bull;&nbsp;).</p>\n<p>use the breadcrumbs to get back to the first help page</p>"
          }, {
            id: 'help-menu',
            title: 'the menu',
            notes: "<h2> menu allmighty </h2>\n<p>click the menu icon ( <i class='icon-ellipsis-vertical'></i> ) to open up simplenote's menu. click on the items below to learn what each of the menu items does.</p>",
            children: [
              {
                id: 'help-menu-notebook',
                title: '<i class=\'icon-book\'></i>&nbsp;notebook',
                notes: "<h2> the center of simplenote </h2>\n<p>at its core, simplenote is just a note-taking app, so you will propably spend the most of your time here.</p>\n<p>you will learn more on how to work with simplenote when you progress to the chapters about working on a desktop or mobile screen.</p>\n<p>or you can just skip <a href='#help-desktop'>there</a> or <a href='#help-mobile'>there</a>.</p>"
              }, {
                id: 'help-menu-agenda',
                title: '<i class=\'icon-time\'></i>&nbsp;agenda',
                notes: "<h2> coming soon </h2>"
              }, {
                id: 'help-menu-calendar',
                title: '<i class=\'icon-calendar\'></i>&nbsp;calendar',
                notes: "<h2> coming soon </h2>"
              }, {
                id: 'help-menu-timesheet',
                title: '<i class=\'icon-ticket\'></i>&nbsp;timeheet',
                notes: "<h2> coming soon </h2>"
              }, {
                id: 'help-menu-archive',
                title: '<i class=\'icon-folder-open-alt\'></i>&nbsp;archive',
                notes: "<h2> do not throw away </h2>\nbut do archive instead.\n<p>instead of deleting items, you can archive them, and they will appear in your archive. from here, you can restore them and move them back to your notebook.</p>\n<p>do not be concerned about a huge archive slowing down your loading times. the archive is loaded seperately, <u>after</u> your notebook.</p>"
              }, {
                id: 'help-menu-options',
                title: '<i class=\'icon-cog\'></i>&nbsp;options'
              }, {
                id: 'help-menu-help',
                title: '<i class=\'icon-question\'></i>&nbsp;help'
              }, {
                id: 'help-menu-about',
                title: '<i class=\'icon-info\'></i>&nbsp;about'
              }
            ]
          }, {
            id: 'help-desktop',
            title: 'simplenote on a large screen',
            notes: "<h2> simplenote on a large screen </h2>\n<p>so you are using simplenote on a large screen. beautiful!</p>\n<p>when you hover above a note, you will notice a small plus sign appearing left to the bullet (&nbsp;+ &bull;&nbsp;). use this to fold or unfold an item and instantly see its contents. you wont have this feature on a small screen, but there isnt enough space for folding anyway. the plus sign won't appear in the help or options sections either.</p>\n<p>also you will notice a square on the right side of the item you are hovering over (&nbsp;<i class='icon-check-empty'></i>&nbsp;). use this to select (&nbsp;<i class='icon-check'></i>&nbsp;) one or multiple items to perform operations on them.</p>\n<p>to the left of the checkbox appears an tag icon with a plus sign (&nbsp;<i class='icon-tag'>+</i>&nbsp;). click it to edit the tags on your item. this, too, won't be available on smaller screens.</p>"
          }, {
            id: 'help-mobile',
            title: 'simplenote on a mobile phone',
            notes: "<h2> simplenote on a mobile phone </h2>\n<p>so you are using simplenote on a mobile screen. nifty!</p>\n<p>use the bullets (&nbsp;&bull;&nbsp;) and breadcrumbs to navigate through your notebook.</p>\n<p>on the right side of each item you will see a checkbox (&nbsp;<i class='icon-check-empty'></i>&nbsp;). use it to select (&nbsp;<i class='icon-check'></i>&nbsp;) one or multpile items to perform operations on them.</p>"
          }, {
            id: 'help-search',
            title: 'simplenote search',
            notes: "<h2> find everything (&nbsp;in your notebook&nbsp;) </h2>\n<p>narrow your current view down by using the search bar. you can also search for items with certain tags if you prepend a hash to the tag like (&nbsp;#work&nbsp;).</p>\n<p>when you hover over the search bar, notice how the magnifying glass changes to a cross? use the cross to clear your search and get back to the mess that your notebook is</p>"
          }, {
            id: 'help-tags',
            title: 'simplenote tags',
            notes: "<h2> even more structure </h2>\n<p><b>Desktop</b><br>\nwhen you hover above a note, you will see a tag icon appearing on the right hand side (&nbsp;<i class='icon-tag'></i>&nbsp;). use this to add or remove tags to your notes. click on a tag which is already assigned to the note you are working on to toggle it off.</p>\n<p><b>Mobile &amp; Desktop</b></br>\nafter selecting one ore more tags, use the appearing menu to toggle the tags on all selected items.</p>\n<p>you can also edit the tags for the current top item with the tag icon located below the breadcrumbs.</p>\n<p>you can search for items with certain tags by prepending a hash like (&nbsp;#work&nbsp;). or you can use the dropdown menu which will appear when you click on the tag icon in the search bar</p>\n<p>in the same dropdown, you will notice a pencil (&nbsp;<i class='icon-pencil'></i>&nbsp;) and a trashcan (&nbsp;<i class='icon-trash'></i>&nbsp;). need a hint what to do with 'em? okay: the pencil renames and repaints the tag and the trashcan trashes it. pretty straightforward, isn't it?</p>\n<p>when picking the color for your tags you can either choose a hex color like (&nbsp;#FF00FF&nbsp;) or a CSS-friendly color name like (&nbsp;CornflowerBlue&nbsp;). for a complete list and some inspiration, check <a href='http://www.w3schools.com/cssref/css_colornames.asp'>W3schools Color Names</a>.</p>"
          }, {
            id: 'help-bookmarks',
            title: 'simplenote bookmarks',
            notes: "<h2> only the important stuff, at one glance </h2>\n<p>selecte one or multiple items and bookmark them with a click on the star icon (&nbsp;<i class='icon-star'></i>&nbsp;) on the appearing menu.</p>\n<p>or use the star icon below the breadcrumbs for the same task</p>\n<p>when you click on the star icon in the search bar, you will get a list of all your bookmarked items.</p>\n<p>in this dropdown, see the half-star on the right side (&nbsp;<i class='icon-star-half-full'></i>&nbsp;)? you can click it to remove a bookmark instantly</p>"
          }, {
            id: 'help-deadlines',
            title: 'simplenote deadlines',
            notes: "<h2> push yourself with deadlines </h2>\n<p>on the right side of every note you will see a clock icon appearing when you move your mouse over it. use this clock to set a deadline.</p>\n<p>you can also use the clock icon below the breadcrumbs to do the same.</p>\n<p>when setting a deadline, you can also use natual language. try setting an alarm for ( in a week ) for example. if the clock doesn't recognize what you are trying to say, <a href='mailto:" + email + "'>give me a shout</a> and i will teach the clock new tongues.</p>\n<p>to delete a deadline, simply pass an empty string in the prompt</p>"
          }, {
            id: 'help-offline',
            title: 'simplenote offline',
            notes: "<h2> simplenote offline </h2>\n<p>you won't have to do anything special to work offline with simplenote. everything is saved in your browser as you type. go online. go offline. simplenote doesn't care.</p>\n<p>on the bottom of the screen you will see a small notification which will tell you if it is connected to the server or not. but have no fear, the server DOES NOT get any data from simplenote, only the other way around.</p>"
          }, {
            id: 'help-sync',
            title: 'simplenote sync',
            notes: "<h2> simplenote in sync </h2>\n<p>you want to use simplenote on all of your devices? simplenote will gladly help you.</p>\n<p>swing by the <a href='#options'>options</a> section and connect simplenote to your favorite online storage system.</p>"
          }
        ]
      }, {
        id: 'options',
        title: 'options',
        notes: "<h2> simplenote options </h2>\n<p>not too much to see here yet, but feel free to play around.</p>\n<p>if you're missing an option, <a href='mailto:" + email + "'>raise your voice</a>, and i'll be glad to help you out.</p>",
        children: [
          {
            id: 'options-appearance',
            title: 'appearance',
            notes: "<h2> appearance </h2>\n<p>work in progress</p>"
          }, {
            id: 'options-dropbox',
            title: 'dropbox sync',
            notes: "<h2> sync with dropbox </h2>\n<div class='options'>\n<p>your dropbox account is <span data-bind='text:syncStatusText,style:{color:syncStatusColor}'</span></p>\n<p>work in progress</p>\n</div>"
          }
        ]
      }, {
        id: 'about',
        title: 'about simplenote',
        notes: "<h2> about simplenote </h2>\n<p>version : " + version + " - " + date + " </p>\n<p>author : <a href='mailto:" + email + "'>" + author + "</a></p>\n<p>github : <a href='" + github + "'>" + github + "</a></p>\n<p>if you have trouble using simplenote or have found a bug or have an idea you would love to see come to live in simplenote. write me a mail or drop by my github page.</p>"
      }
    ];
    addconstructor = function(n) {
      var c, _i, _len, _ref1, _results;

      n.__constructor = 'Node';
      n.readonly = true;
      if (n.children) {
        _ref1 = n.children;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          c = _ref1[_i];
          _results.push(addconstructor(c));
        }
        return _results;
      }
    };
    return (function($, view, model) {
      var page, _i, _len;

      for (_i = 0, _len = specialPages.length; _i < _len; _i++) {
        page = specialPages[_i];
        addconstructor(page);
      }
      return $(function() {
        return JSON.parse(JSON.stringify(specialPages), revive);
      });
    })(jQuery, 'body', SimpleNote.activeInstance);
  })();

}).call(this);
