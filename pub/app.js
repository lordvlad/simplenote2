// Generated by CoffeeScript 1.6.2
(function() {
  var Node, SimpleNote, interval, isArr, isDate, isFn, isNum, isObj, isStr, koMap, obs, revive, sizeOf, store, time, timeout, uuid,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  isFn = jQuery.isFunction;

  isArr = jQuery.isArray;

  isObj = jQuery.isPlainObject;

  isNum = jQuery.isNumeric;

  isStr = function(v) {
    return typeof v === "string";
  };

  isDate = function(v) {
    if (Object.prototype.toString.call(v) !== '[object Date]') {
      return false;
    } else {
      return !isNaN(v.getTime());
    }
  };

  timeout = {
    set: function(ms, fn) {
      return setTimeout(fn, ms);
    },
    clear: function(t) {
      return clearTimeout(t);
    }
  };

  interval = {
    set: function(ms, fn) {
      return setInterval(fn, ms);
    },
    clear: function(i) {
      return clearInterval(i);
    }
  };

  store = {
    set: function(key, val) {
      return localStorage.setItem(key, (isStr(val) ? val : JSON.stringify(val)));
    },
    get: function(key, rev) {
      var ret;

      ret = localStorage.getItem(key);
      if (rev) {
        return JSON.parse(ret, revive);
      } else {
        return JSON.parse(ret);
      }
    },
    remove: function(key) {
      return localStorage.removeItem(key);
    }
  };

  revive = function(key, value) {
    var c;

    if (value && value.__constructor && (c = window[value.__constructor] || revive.constructors[value["class"]]) && typeof c.fromJSON === "function") {
      return c.fromJSON(value);
    } else {
      return value;
    }
  };

  revive.constructors = [];

  obs = function(value, owner) {
    switch (false) {
      case !(value && (value.call || value.read || value.write)):
        return ko.computed(value);
      case !(value && value.map):
        return ko.observableArray(value, owner || this);
      default:
        return ko.observable(value);
    }
  };

  uuid = (function() {
    var id, ids;

    ids = [];
    id = function(a) {
      if (a) {
        return (a ^ Math.random() * 16 >> a / 4).toString(16);
      } else {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, id);
      }
    };
    return function() {
      var e;

      while (true) {
        e = id();
        if (!~ids.indexOf(e)) {
          break;
        }
      }
      ids.push(e);
      return e;
    };
  })();

  time = (function() {
    var a;

    a = obs(0);
    interval.set(1e3, function() {
      return a(new Date);
    });
    return a;
  })();

  sizeOf = function(v) {
    var k;

    switch (false) {
      case !isNum(v):
        return v.split("").length;
      case !isStr(v || isArr(v)):
        return v.length;
      case !isObj(v):
        return ((function() {
          var _results;

          _results = [];
          for (k in v) {
            if (!__hasProp.call(v, k)) continue;
            _results.push(k);
          }
          return _results;
        })()).length;
      default:
        return null;
    }
  };

  koMap = function(model, map) {
    var key, value;

    for (key in map) {
      value = map[key];
      if (ko.isWriteableObservable(model[key])) {
        model[key](value);
      } else {
        model[key] = value;
      }
    }
    return model;
  };

  /*
  @class simpleNote
  */


  SimpleNote = (function() {
    function SimpleNote(element) {
      this.insertNodeAfter = __bind(this.insertNodeAfter, this);
      this.addNodeHere = __bind(this.addNodeHere, this);
      this.addNodeTo = __bind(this.addNodeTo, this);
      this.textEmbed = __bind(this.textEmbed, this);
      this.textLink = __bind(this.textLink, this);
      this.textUnderline = __bind(this.textUnderline, this);
      this.textItalics = __bind(this.textItalics, this);
      this.textBold = __bind(this.textBold, this);
      this.selectionEditTags = __bind(this.selectionEditTags, this);
      this.selectionArchive = __bind(this.selectionArchive, this);
      this.selectionInvert = __bind(this.selectionInvert, this);
      this.selectionUnselect = __bind(this.selectionUnselect, this);
      this.selectionRemove = __bind(this.selectionRemove, this);
      this.save = __bind(this.save, this);
      this.revive = __bind(this.revive, this);
      this.toJSON = __bind(this.toJSON, this);
      this.attachElements = __bind(this.attachElements, this);
      var _this = this;

      this.timeout = null;
      this.interval = null;
      this.root = null;
      this.element = null;
      this.pop = null;
      this.current = obs(null);
      this.nodes = obs([]);
      this.tags = obs([]);
      this.selectedNodes = obs(function() {
        return _this.nodes.filter('selected');
      });
      this.bookmarkedNodes = obs(function() {
        return _this.nodes.filter('bookmarked');
      });
      this.breadcrumbs = obs(function() {
        var crumbs, getParent;

        crumbs = [];
        getParent = function(node) {
          var p;

          p = _this.nodes.find(function(n) {
            return n.children.has(node);
          });
          if (p) {
            crumbs.push(node);
            return console.log(p);
          }
        };
        getParent(_this.current());
        return crumbs;
      });
      this;
    }

    SimpleNote.prototype.attachElements = function(view) {
      this.$view = $(view);
      this.view = this.$view[0];
      this.pop = $('audio', view)[0];
      return this.$tagsMenu = $('#tagsMenu', view);
    };

    SimpleNote.prototype.toJSON = function() {
      return {
        root: this.root,
        tags: this.tags()
      };
    };

    SimpleNote.prototype.revive = function() {
      var data, root;

      if (data = store.get("simpleNote", true)) {
        this.root = data.nodes;
        this.tags(data.tags);
      } else {
        root = new Node;
        root.id = "simpleNoteRoot";
        this.root = root;
      }
      this.current(this.root);
      return this;
    };

    SimpleNote.prototype.save = function() {
      var _this = this;

      timeout.clear(this.timeout);
      this.timeout = timeout.set(100, function() {
        return store.set("simpleNote", _this.toJSON());
      });
      return this;
    };

    SimpleNote.prototype.applyKeyBindings = function() {
      var _this = this;

      this.$view.on("click", ".headline", function(e) {
        var $t;

        $t = $(e.target);
        if (!$t.is(".bullet, .action, .ellipsis, .additional")) {
          return $t.parents(".headline").find("title").focus();
        }
      });
      this.$view.on("keyup, click", function() {
        return _this.save();
      });
      return this;
    };

    SimpleNote.prototype.startPeriodicalSave = function() {
      this.save();
      this.interval = interval.set(6e4, this.save);
      return this;
    };

    SimpleNote.prototype.stopPeriodicalSave = function() {
      interval.clear(this.interval);
      return this;
    };

    SimpleNote.prototype.selectionRemove = function() {
      if (confirm("really delete all selected outlines?")) {
        this.nodes.removeAll(this.selected());
        this.save();
      }
      return this;
    };

    SimpleNote.prototype.selectionUnselect = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.selected(false)();
      }
      return this;
    };

    SimpleNote.prototype.selectionInvert = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.selected(!node.selected())();
      }
      return this;
    };

    SimpleNote.prototype.selectionArchive = function() {
      var node, _i, _len, _ref;

      _ref = this.selected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.archived(true)();
      }
      return this;
    };

    SimpleNote.prototype.selectionEditTags = function() {};

    SimpleNote.prototype.textBold = function() {};

    SimpleNote.prototype.textItalics = function() {};

    SimpleNote.prototype.textUnderline = function() {};

    SimpleNote.prototype.textLink = function() {};

    SimpleNote.prototype.textEmbed = function() {};

    SimpleNote.prototype.addNodeTo = function(parent, options) {
      if (!isObj(options)) {
        options = {};
      }
      return new Node($.extend(options, {
        parent: parent
      }));
    };

    SimpleNote.prototype.addNodeHere = function(options) {
      return this.addNodeTo(this.current(), options);
    };

    SimpleNote.prototype.insertNodeAfter = function(node, options) {
      return this.addNodeTo(this.current().parent(), options);
    };

    return SimpleNote;

  })();

  SimpleNote.liststyletypes = [
    {
      name: "none",
      value: []
    }, {
      name: "1, 2, 3",
      value: ["decimal"]
    }, {
      name: "1., 2., 3.",
      value: ["decimal", "dot"]
    }, {
      name: "1.1, 1.2, 1.3",
      value: ["decimal", "dot", "add"]
    }, {
      name: "a, b, c",
      value: ["lowerAlpha"]
    }, {
      name: "(a), (b), (c)",
      value: ["lowerAlpha", "dot"]
    }, {
      name: "A, B, C",
      value: ["upperAlpha"]
    }, {
      name: "(A), (B), (C)",
      value: ["upperAlpha", "dot"]
    }
  ];

  /*
  * @class Node
  */


  Node = (function() {
    function Node(options) {
      this.toJSON = __bind(this.toJSON, this);
      this.editTags = __bind(this.editTags, this);
      var _this = this;

      this.smplnt = (options != null ? options.smplnt : void 0) || window.note;
      this.id = uuid();
      this.title = obs("");
      this.title.extend({
        parse: Node.parseHeadline
      });
      this.notes = obs("");
      this.notes.extend({
        parse: Node.parseNote
      });
      this.deadline = obs(null);
      this.deadline.extend({
        parse: Node.parseDate
      });
      this.bookmarked = obs(false);
      this.selected = obs(false);
      this.done = obs(false);
      this.expanded = obs(false);
      this.listStyleType = obs([]);
      this.editingTitle = obs(false);
      this.editingNote = obs(false);
      this.children = obs([]);
      this.tags = obs([]);
      this.tags.extend({
        pickFrom: {
          array: this.smplnt.tags,
          key: "name"
        }
      });
      this.files = obs([]);
      this.hasNote = obs(function() {
        return _this.notes().length;
      });
      this.hasChildren = obs(function() {
        return _this.children.length;
      });
      this.cssClass = obs(function() {
        return _this.listStyleType().concat("node").filter(Boolean).join(" ");
      });
      this.bullet = obs(function() {
        return (_this.hasNote() || _this.hasChildren) && (!_this.expanded() && "&#9658;" || _this.expanded() && "&#9660") || "&9679;";
      });
      this.deadlineDisplay = obs(function() {
        var d;

        time();
        d = _this.deadline();
        if (d === !null) {
          if (d > new Date) {
            return moment(d).fromNow();
          } else {
            return _this.alarm();
          }
        } else {
          return "";
        }
      });
      this.smplnt.nodes.push(this);
      if (options != null ? options.parent : void 0) {
        options.parent.children.push(this);
      }
      this;
    }

    Node.prototype.alarm = function() {
      this.deadline(null);
      this.smplnt.pop.play();
      alert(this.title());
      return "";
    };

    Node.prototype.editTags = function(n, e) {
      return this.smplnt.$tagsMenu.trigger("position", e.target.on("menuselect", function(e, ui) {
        if (!(ui && ui.item)) {
          return;
        }
        if (!this.tags.remove(ui.item)) {
          return this.tags.push(ui.item);
        }
      }));
    };

    Node.prototype.toJSON = function() {
      return {
        __constructor: 'Node',
        id: this.id,
        title: this.title(),
        notes: this.notes(),
        deadline: this.deadline(),
        bookmarked: this.bookmarked(),
        done: this.done(),
        expanded: this.expanded(),
        listStyleType: this.listStyleType(),
        children: this.children()
      };
    };

    Node.fromJSON = function(data) {
      var instance;

      delete data.__constructor;
      instance = new Node;
      return koMap(instance, data);
    };

    Node.parseNote = function(v) {
      return v;
    };

    Node.parseHeadline = function(v) {
      return v;
    };

    Node.parseDate = function(v) {
      v = new Date(v);
      if (!isDate(v)) {
        v = null;
      }
      return v;
    };

    return Node;

  }).call(this);

  (function($, view, model) {
    return $(function() {
      $.extend(true, window, {
        SimpleNote: SimpleNote,
        Node: Node
      });
      model.attachElements(view);
      ko.applyBindings(model, model.view);
      model.revive();
      model.applyKeyBindings();
      return model.startPeriodicalSave();
    });
  })(jQuery, "body", window.note = new SimpleNote);

}).call(this);
